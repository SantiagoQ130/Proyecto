import struct
import utime
from machine import Pin, SPI, I2C
from nrf24l01 import NRF24L01
from micropython import const
import ssd1306

# Pines NRF24L01
SPI_ID = 0
SCK_PIN = 2
MOSI_PIN = 3
MISO_PIN = 4
CSN_PIN = 5
CE_PIN = 6

# Pines OLED (I2C)
I2C_SDA = 14
I2C_SCL = 15

# Configuración OLED
WIDTH = 128
HEIGHT = 64

# LED interno
led = Pin("LED", Pin.OUT)

# Canal y direcciones RF
CANAL_RF = 21
TX_ADDRESS = b"\xe1\xf0\xf0\xf0\xf0"
RX_ADDRESS = b"\xd2\xf0\xf0\xf0\xf0"
DATA_RATE = 1
RF_POWER = 3

# Tiempos
_RX_POLL_DELAY = const(2)
_RESPONDER_SEND_DELAY = const(2)

# Inicializar OLED
i2c = I2C(1, scl=Pin(I2C_SCL), sda=Pin(I2C_SDA))
oled = ssd1306.SSD1306_I2C(WIDTH, HEIGHT, i2c)

def setup_nrf24l01():
    spi = SPI(SPI_ID, sck=Pin(SCK_PIN), mosi=Pin(MOSI_PIN), miso=Pin(MISO_PIN))
    csn = Pin(CSN_PIN, mode=Pin.OUT, value=1)
    ce = Pin(CE_PIN, mode=Pin.OUT, value=0)

    nrf = NRF24L01(spi, csn, ce, payload_size=8)
    nrf.set_channel(CANAL_RF)

    try:
        nrf.set_data_rate(DATA_RATE)
    except AttributeError:
        print("Tasa de datos no configurable")

    try:
        nrf.set_power(RF_POWER)
    except AttributeError:
        print("Potencia no configurable")

    nrf.open_tx_pipe(RX_ADDRESS)
    nrf.open_rx_pipe(1, TX_ADDRESS)

    print(f"NRF24L01 receptor en canal {CANAL_RF}")
    return nrf

def mostrar_en_oled(id, valor):
    oled.fill(0)
    oled.text("Mensaje recibido:", 0, 0)
    oled.text(f"ID: {id}", 0, 20)
    oled.text(f"Valor: {valor}", 0, 35)
    oled.show()

def receiver_loop(nrf):
    nrf.start_listening()
    print("\nEscuchando transmisiones...")

    try:
        while True:
            if nrf.any():
                led.on()

                while nrf.any():
                    buf = nrf.recv()
                    message_id, message_value = struct.unpack("ii", buf)
                    print(f"Recibido - ID: {message_id}, Valor: {message_value}")
                    mostrar_en_oled(message_id, message_value)
                    utime.sleep_ms(_RX_POLL_DELAY)

                utime.sleep_ms(_RESPONDER_SEND_DELAY)
                nrf.stop_listening()
                try:
                    nrf.send(struct.pack("i", message_id))
                    print("Enviada confirmación")
                except OSError:
                    pass
                nrf.start_listening()

                led.off()

    except KeyboardInterrupt:
        print("\nRecepción interrumpida")

def main():
    print("\n--- Iniciando receptor NRF24L01 + OLED ---")
    try:
        nrf = setup_nrf24l01()
    except Exception as e:
        print(f"Error al configurar NRF24L01: {e}")
        return

    receiver_loop(nrf)

if __name__ == "__main__":
    main()
